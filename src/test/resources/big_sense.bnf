unit = packageDeclaration ,  importDeclarations?, typeDeclarations;
packageDeclaration  = 'package' , identifier , ';' ;
importDeclarations = importDeclaration | importDeclarations , importDeclaration;
importDeclaration = 'import' , identifier , ';' ;
typeDeclarations = typeDeclaration | typeDeclarations ,  typeDeclaration;
typeDeclaration = classDeclaration ;
classDeclaration =  'class', identifier, superDeclaration, classBody;
superDeclaration = empty | 'extends' , identifier;
classBody = '{',classBodyDeclarations ,'}' | '{' ,'}';
classBodyDeclarations = classBodyDeclaration | classBodyDeclarations, classBodyDeclaration;
classBodyDeclaration = classMemberDeclaration;
classMemberDeclaration = fieldDeclaration | methodDeclaration;
fieldDeclaration =  type , variableDeclarator, ';';
type = identifier;
variableDeclarator= variableName | variableName, '=', variableInit ;
variableInit = identifier | number;
variableName = identifier;
methodDeclaration= methodHeader , methodBody;
methodHeader = returnType, identifier ,'(', formalParameterList , ')' | returnType, identifier ,'(', ')'; 
methodBody = block ;
block =  '{' , '}' | '{' , blockStatements , '}';
returnType = type | 'void';
formalParameterList = formalParameter | formalParameterList, ',', formalParameter;
formalParameter =  type, variableName;
blockStatements = blockStatement | blockStatements, blockStatement;
blockStatement = localVariableDeclarationStatement | whileStatement;
localVariableDeclarationStatement= localVariableDeclaration, ';';
localVariableDeclaration = type, variableDeclarator;
whileStatement= 'while', '(', booleanExpression, ')',  block | 'while', '(', booleanExpression, ')';
booleanExpression = 'true' | 'false';