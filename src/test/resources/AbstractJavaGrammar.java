package compiler.java;
import compiler.AbstractGrammar;
import compiler.parser.EmptyTerminal;
import compiler.parser.Identifier;
import compiler.parser.NonTerminal;
import compiler.parser.Terminal;
import compiler.parser.Text;
import compiler.parser.Numeric;

public abstract class AbstractJavaGrammar extends AbstractGrammar {

public AbstractJavaGrammar (){
	super();
}

protected NonTerminal defineGrammar() {

NonTerminal unit = addNonTerminal(NonTerminal.of("unit"));
NonTerminal packageDeclaration = addNonTerminal(NonTerminal.of("packageDeclaration"));
NonTerminal packageName = addNonTerminal(NonTerminal.of("packageName"));
NonTerminal importDeclarations = addNonTerminal(NonTerminal.of("importDeclarations"));
NonTerminal importDeclaration = addNonTerminal(NonTerminal.of("importDeclaration"));
NonTerminal singleTypeImportDeclaration = addNonTerminal(NonTerminal.of("singleTypeImportDeclaration"));
NonTerminal typeImportOnDemandDeclaration = addNonTerminal(NonTerminal.of("typeImportOnDemandDeclaration"));
NonTerminal typeDeclarations = addNonTerminal(NonTerminal.of("typeDeclarations"));
NonTerminal typeName = addNonTerminal(NonTerminal.of("typeName"));
NonTerminal typeDeclaration = addNonTerminal(NonTerminal.of("typeDeclaration"));
NonTerminal classDeclaration = addNonTerminal(NonTerminal.of("classDeclaration"));
NonTerminal classModifiers = addNonTerminal(NonTerminal.of("classModifiers"));
NonTerminal classModifier = addNonTerminal(NonTerminal.of("classModifier"));
NonTerminal superDeclaration = addNonTerminal(NonTerminal.of("superDeclaration"));
NonTerminal interfaces = addNonTerminal(NonTerminal.of("interfaces"));
NonTerminal interfaceTypeList = addNonTerminal(NonTerminal.of("interfaceTypeList"));
NonTerminal classBody = addNonTerminal(NonTerminal.of("classBody"));
NonTerminal staticInitializer = addNonTerminal(NonTerminal.of("staticInitializer"));
NonTerminal classBodyDeclarations = addNonTerminal(NonTerminal.of("classBodyDeclarations"));
NonTerminal classBodyDeclaration = addNonTerminal(NonTerminal.of("classBodyDeclaration"));
NonTerminal classMemberDeclaration = addNonTerminal(NonTerminal.of("classMemberDeclaration"));
NonTerminal fieldDeclaration = addNonTerminal(NonTerminal.of("fieldDeclaration"));
NonTerminal methodDeclaration = addNonTerminal(NonTerminal.of("methodDeclaration"));
NonTerminal methodBody = addNonTerminal(NonTerminal.of("methodBody"));
NonTerminal block = addNonTerminal(NonTerminal.of("block"));
NonTerminal methodHeader = addNonTerminal(NonTerminal.of("methodHeader"));
NonTerminal constructorDeclaration = addNonTerminal(NonTerminal.of("constructorDeclaration"));
NonTerminal constructorModifiers = addNonTerminal(NonTerminal.of("constructorModifiers"));
NonTerminal constructorModifier = addNonTerminal(NonTerminal.of("constructorModifier"));
NonTerminal constructorDeclarator = addNonTerminal(NonTerminal.of("constructorDeclarator"));
NonTerminal formalParameterList = addNonTerminal(NonTerminal.of("formalParameterList"));
NonTerminal formalParameter = addNonTerminal(NonTerminal.of("formalParameter"));
NonTerminal ntthrows = addNonTerminal(NonTerminal.of("throws"));
NonTerminal classTypeList = addNonTerminal(NonTerminal.of("classTypeList"));
NonTerminal constructorBody = addNonTerminal(NonTerminal.of("constructorBody"));
NonTerminal explicitConstructorInvocation = addNonTerminal(NonTerminal.of("explicitConstructorInvocation"));
NonTerminal fieldModifiers = addNonTerminal(NonTerminal.of("fieldModifiers"));
NonTerminal fieldModifier = addNonTerminal(NonTerminal.of("fieldModifier"));
NonTerminal variableDeclarators = addNonTerminal(NonTerminal.of("variableDeclarators"));
NonTerminal variableDeclarator = addNonTerminal(NonTerminal.of("variableDeclarator"));
NonTerminal variableDeclaratorId = addNonTerminal(NonTerminal.of("variableDeclaratorId"));
NonTerminal variableInitializer = addNonTerminal(NonTerminal.of("variableInitializer"));
NonTerminal resultType = addNonTerminal(NonTerminal.of("resultType"));
NonTerminal methodModifiers = addNonTerminal(NonTerminal.of("methodModifiers"));
NonTerminal methodModifier = addNonTerminal(NonTerminal.of("methodModifier"));
NonTerminal methodDeclarator = addNonTerminal(NonTerminal.of("methodDeclarator"));
NonTerminal interfaceDeclaration = addNonTerminal(NonTerminal.of("interfaceDeclaration"));
NonTerminal interfaceModifiers = addNonTerminal(NonTerminal.of("interfaceModifiers"));
NonTerminal interfaceModifier = addNonTerminal(NonTerminal.of("interfaceModifier"));
NonTerminal extendsInterfaces = addNonTerminal(NonTerminal.of("extendsInterfaces"));
NonTerminal interfaceBody = addNonTerminal(NonTerminal.of("interfaceBody"));
NonTerminal interfaceMemberDeclarations = addNonTerminal(NonTerminal.of("interfaceMemberDeclarations"));
NonTerminal interfaceMemberDeclaration = addNonTerminal(NonTerminal.of("interfaceMemberDeclaration"));
NonTerminal constantDeclaration = addNonTerminal(NonTerminal.of("constantDeclaration"));
NonTerminal constantModifiers = addNonTerminal(NonTerminal.of("constantModifiers"));
NonTerminal abstractMethodDeclaration = addNonTerminal(NonTerminal.of("abstractMethodDeclaration"));
NonTerminal abstractMethodModifiers = addNonTerminal(NonTerminal.of("abstractMethodModifiers"));
NonTerminal abstractMethodModifier = addNonTerminal(NonTerminal.of("abstractMethodModifier"));
NonTerminal arrayInitializer = addNonTerminal(NonTerminal.of("arrayInitializer"));
NonTerminal variableInitializers = addNonTerminal(NonTerminal.of("variableInitializers"));
NonTerminal type = addNonTerminal(NonTerminal.of("type"));
NonTerminal primitiveType = addNonTerminal(NonTerminal.of("primitiveType"));
NonTerminal numericType = addNonTerminal(NonTerminal.of("numericType"));
NonTerminal integralType = addNonTerminal(NonTerminal.of("integralType"));
NonTerminal floatingPointType = addNonTerminal(NonTerminal.of("floatingPointType"));
NonTerminal referenceType = addNonTerminal(NonTerminal.of("referenceType"));
NonTerminal classOrInterfaceType = addNonTerminal(NonTerminal.of("classOrInterfaceType"));
NonTerminal classType = addNonTerminal(NonTerminal.of("classType"));
NonTerminal interfaceType = addNonTerminal(NonTerminal.of("interfaceType"));
NonTerminal arrayType = addNonTerminal(NonTerminal.of("arrayType"));
NonTerminal blockStatements = addNonTerminal(NonTerminal.of("blockStatements"));
NonTerminal blockStatement = addNonTerminal(NonTerminal.of("blockStatement"));
NonTerminal localVariableDeclarationStatement = addNonTerminal(NonTerminal.of("localVariableDeclarationStatement"));
NonTerminal localVariableDeclaration = addNonTerminal(NonTerminal.of("localVariableDeclaration"));
NonTerminal statement = addNonTerminal(NonTerminal.of("statement"));
NonTerminal statementNoShortIf = addNonTerminal(NonTerminal.of("statementNoShortIf"));
NonTerminal statementWithoutTrailingSubstatement = addNonTerminal(NonTerminal.of("statementWithoutTrailingSubstatement"));
NonTerminal emptyStatement = addNonTerminal(NonTerminal.of("emptyStatement"));
NonTerminal labeledStatement = addNonTerminal(NonTerminal.of("labeledStatement"));
NonTerminal labeledStatementNoShortIf = addNonTerminal(NonTerminal.of("labeledStatementNoShortIf"));
NonTerminal expressionStatement = addNonTerminal(NonTerminal.of("expressionStatement"));
NonTerminal statementExpression = addNonTerminal(NonTerminal.of("statementExpression"));
NonTerminal ifThenStatement = addNonTerminal(NonTerminal.of("ifThenStatement"));
NonTerminal ifThenElseStatement = addNonTerminal(NonTerminal.of("ifThenElseStatement"));
NonTerminal ifThenElseStatementNoShortIf = addNonTerminal(NonTerminal.of("ifThenElseStatementNoShortIf"));
NonTerminal switchStatement = addNonTerminal(NonTerminal.of("switchStatement"));
NonTerminal switchBlock = addNonTerminal(NonTerminal.of("switchBlock"));
NonTerminal switchBlockStatementGroups = addNonTerminal(NonTerminal.of("switchBlockStatementGroups"));
NonTerminal switchBlockStatementGroup = addNonTerminal(NonTerminal.of("switchBlockStatementGroup"));
NonTerminal switchLabels = addNonTerminal(NonTerminal.of("switchLabels"));
NonTerminal switchLabel = addNonTerminal(NonTerminal.of("switchLabel"));
NonTerminal whileStatement = addNonTerminal(NonTerminal.of("whileStatement"));
NonTerminal whileStatementNoShortIf = addNonTerminal(NonTerminal.of("whileStatementNoShortIf"));
NonTerminal doStatement = addNonTerminal(NonTerminal.of("doStatement"));
NonTerminal forStatement = addNonTerminal(NonTerminal.of("forStatement"));
NonTerminal forStatementNoShortIf = addNonTerminal(NonTerminal.of("forStatementNoShortIf"));
NonTerminal forInit = addNonTerminal(NonTerminal.of("forInit"));
NonTerminal forUpdate = addNonTerminal(NonTerminal.of("forUpdate"));
NonTerminal statementExpressionList = addNonTerminal(NonTerminal.of("statementExpressionList"));
NonTerminal breakStatement = addNonTerminal(NonTerminal.of("breakStatement"));
NonTerminal continueStatement = addNonTerminal(NonTerminal.of("continueStatement"));
NonTerminal returnStatement = addNonTerminal(NonTerminal.of("returnStatement"));
NonTerminal throwsStatement = addNonTerminal(NonTerminal.of("throwsStatement"));
NonTerminal synchronizedStatement = addNonTerminal(NonTerminal.of("synchronizedStatement"));
NonTerminal tryStatement = addNonTerminal(NonTerminal.of("tryStatement"));
NonTerminal catches = addNonTerminal(NonTerminal.of("catches"));
NonTerminal catchClause = addNonTerminal(NonTerminal.of("catchClause"));
NonTerminal ntfinally = addNonTerminal(NonTerminal.of("finally"));
NonTerminal constantExpression = addNonTerminal(NonTerminal.of("constantExpression"));
NonTerminal expression = addNonTerminal(NonTerminal.of("expression"));
NonTerminal assignmentExpression = addNonTerminal(NonTerminal.of("assignmentExpression"));
NonTerminal assignment = addNonTerminal(NonTerminal.of("assignment"));
NonTerminal leftHandSide = addNonTerminal(NonTerminal.of("leftHandSide"));
NonTerminal assignmentOperator = addNonTerminal(NonTerminal.of("assignmentOperator"));
NonTerminal conditionalExpression = addNonTerminal(NonTerminal.of("conditionalExpression"));
NonTerminal conditionalOrExpression = addNonTerminal(NonTerminal.of("conditionalOrExpression"));
NonTerminal conditionalAndExpression = addNonTerminal(NonTerminal.of("conditionalAndExpression"));
NonTerminal inclusiveOrExpression = addNonTerminal(NonTerminal.of("inclusiveOrExpression"));
NonTerminal exclusiveOrExpression = addNonTerminal(NonTerminal.of("exclusiveOrExpression"));
NonTerminal andExpression = addNonTerminal(NonTerminal.of("andExpression"));
NonTerminal equalityExpression = addNonTerminal(NonTerminal.of("equalityExpression"));
NonTerminal relationalExpression = addNonTerminal(NonTerminal.of("relationalExpression"));
NonTerminal shiftExpression = addNonTerminal(NonTerminal.of("shiftExpression"));
NonTerminal additiveExpression = addNonTerminal(NonTerminal.of("additiveExpression"));
NonTerminal multiplicativeExpression = addNonTerminal(NonTerminal.of("multiplicativeExpression"));
NonTerminal castExpression = addNonTerminal(NonTerminal.of("castExpression"));
NonTerminal unaryExpression = addNonTerminal(NonTerminal.of("unaryExpression"));
NonTerminal preincrementExpression = addNonTerminal(NonTerminal.of("preincrementExpression"));
NonTerminal predecrementExpression = addNonTerminal(NonTerminal.of("predecrementExpression"));
NonTerminal unaryExpressionNotPlusMinus = addNonTerminal(NonTerminal.of("unaryExpressionNotPlusMinus"));
NonTerminal postdecrementExpression = addNonTerminal(NonTerminal.of("postdecrementExpression"));
NonTerminal postincrementExpression = addNonTerminal(NonTerminal.of("postincrementExpression"));
NonTerminal postfixExpression = addNonTerminal(NonTerminal.of("postfixExpression"));
NonTerminal methodInvocation = addNonTerminal(NonTerminal.of("methodInvocation"));
NonTerminal fieldAccess = addNonTerminal(NonTerminal.of("fieldAccess"));
NonTerminal primary = addNonTerminal(NonTerminal.of("primary"));
NonTerminal primaryNoNewArray = addNonTerminal(NonTerminal.of("primaryNoNewArray"));
NonTerminal classInstanceCreationExpression = addNonTerminal(NonTerminal.of("classInstanceCreationExpression"));
NonTerminal argumentList = addNonTerminal(NonTerminal.of("argumentList"));
NonTerminal arrayCreationExpression = addNonTerminal(NonTerminal.of("arrayCreationExpression"));
NonTerminal dimExprs = addNonTerminal(NonTerminal.of("dimExprs"));
NonTerminal dimExpr = addNonTerminal(NonTerminal.of("dimExpr"));
NonTerminal dims = addNonTerminal(NonTerminal.of("dims"));
NonTerminal arrayAccess = addNonTerminal(NonTerminal.of("arrayAccess"));
NonTerminal simpleTypeName = addNonTerminal(NonTerminal.of("simpleTypeName"));
NonTerminal expressionName = addNonTerminal(NonTerminal.of("expressionName"));
NonTerminal methodName = addNonTerminal(NonTerminal.of("methodName"));
NonTerminal ambiguousName = addNonTerminal(NonTerminal.of("ambiguousName"));
NonTerminal literal = addNonTerminal(NonTerminal.of("literal"));
NonTerminal integerLiteral = addNonTerminal(NonTerminal.of("integerLiteral"));
NonTerminal decimalIntegerLiteral = addNonTerminal(NonTerminal.of("decimalIntegerLiteral"));
NonTerminal hexIntegerLiteral = addNonTerminal(NonTerminal.of("hexIntegerLiteral"));
NonTerminal octalIntegerLiteral = addNonTerminal(NonTerminal.of("octalIntegerLiteral"));
NonTerminal integerTypeSuffix = addNonTerminal(NonTerminal.of("integerTypeSuffix"));
NonTerminal decimalNumeral = addNonTerminal(NonTerminal.of("decimalNumeral"));
NonTerminal digits = addNonTerminal(NonTerminal.of("digits"));
NonTerminal digit = addNonTerminal(NonTerminal.of("digit"));
NonTerminal nonZeroDigit = addNonTerminal(NonTerminal.of("nonZeroDigit"));
NonTerminal hexNumeral = addNonTerminal(NonTerminal.of("hexNumeral"));
NonTerminal hexDigit = addNonTerminal(NonTerminal.of("hexDigit"));
NonTerminal octalNumeral = addNonTerminal(NonTerminal.of("octalNumeral"));
NonTerminal octalDigit = addNonTerminal(NonTerminal.of("octalDigit"));
NonTerminal floatingPointLiteral = addNonTerminal(NonTerminal.of("floatingPointLiteral"));
NonTerminal exponentPart = addNonTerminal(NonTerminal.of("exponentPart"));
NonTerminal exponentIndicator = addNonTerminal(NonTerminal.of("exponentIndicator"));
NonTerminal signedInteger = addNonTerminal(NonTerminal.of("signedInteger"));
NonTerminal sign = addNonTerminal(NonTerminal.of("sign"));
NonTerminal floatTypeSuffix = addNonTerminal(NonTerminal.of("floatTypeSuffix"));
NonTerminal booleanLiteral = addNonTerminal(NonTerminal.of("booleanLiteral"));
NonTerminal singleCharacter = addNonTerminal(NonTerminal.of("singleCharacter"));
NonTerminal stringLiteral = addNonTerminal(NonTerminal.of("stringLiteral"));
NonTerminal stringCharacters = addNonTerminal(NonTerminal.of("stringCharacters"));
NonTerminal stringCharacter = addNonTerminal(NonTerminal.of("stringCharacter"));
NonTerminal nullLiteral = addNonTerminal(NonTerminal.of("nullLiteral"));
NonTerminal escapeCharacter = addNonTerminal(NonTerminal.of("escapeCharacter"));
NonTerminal maybePackageDeclaration = addNonTerminal(NonTerminal.of("maybePackageDeclaration"));
NonTerminal maybeImportDeclarations = addNonTerminal(NonTerminal.of("maybeImportDeclarations"));
NonTerminal maybeTypeDeclarations = addNonTerminal(NonTerminal.of("maybeTypeDeclarations"));
NonTerminal maybeClassModifiers = addNonTerminal(NonTerminal.of("maybeClassModifiers"));
NonTerminal maybeSuperDeclaration = addNonTerminal(NonTerminal.of("maybeSuperDeclaration"));
NonTerminal maybeInterfaces = addNonTerminal(NonTerminal.of("maybeInterfaces"));
NonTerminal maybeClassBodyDeclarations = addNonTerminal(NonTerminal.of("maybeClassBodyDeclarations"));
NonTerminal maybeFieldModifiers = addNonTerminal(NonTerminal.of("maybeFieldModifiers"));
NonTerminal maybeBlockStatements = addNonTerminal(NonTerminal.of("maybeBlockStatements"));
NonTerminal maybeMethodModifiers = addNonTerminal(NonTerminal.of("maybeMethodModifiers"));
NonTerminal maybeThrows = addNonTerminal(NonTerminal.of("maybeThrows"));
NonTerminal maybeConstructorModifiers = addNonTerminal(NonTerminal.of("maybeConstructorModifiers"));
NonTerminal maybeFormalParameterList = addNonTerminal(NonTerminal.of("maybeFormalParameterList"));
NonTerminal maybeExplicitConstructorInvocation = addNonTerminal(NonTerminal.of("maybeExplicitConstructorInvocation"));
NonTerminal maybeArgumentList = addNonTerminal(NonTerminal.of("maybeArgumentList"));
NonTerminal maybeInterfaceModifiers = addNonTerminal(NonTerminal.of("maybeInterfaceModifiers"));
NonTerminal maybeExtendsInterfaces = addNonTerminal(NonTerminal.of("maybeExtendsInterfaces"));
NonTerminal maybeInterfaceMemberDeclarations = addNonTerminal(NonTerminal.of("maybeInterfaceMemberDeclarations"));
NonTerminal maybeAbstractMethodModifiers = addNonTerminal(NonTerminal.of("maybeAbstractMethodModifiers"));
NonTerminal maybeVariableInitializers = addNonTerminal(NonTerminal.of("maybeVariableInitializers"));
NonTerminal maybeSwitchBlockStatementGroups = addNonTerminal(NonTerminal.of("maybeSwitchBlockStatementGroups"));
NonTerminal maybeSwitchLabels = addNonTerminal(NonTerminal.of("maybeSwitchLabels"));
NonTerminal maybeForInit = addNonTerminal(NonTerminal.of("maybeForInit"));
NonTerminal maybeExpression = addNonTerminal(NonTerminal.of("maybeExpression"));
NonTerminal maybeForUpdate = addNonTerminal(NonTerminal.of("maybeForUpdate"));
NonTerminal maybeIdentifier = addNonTerminal(NonTerminal.of("maybeIdentifier"));
NonTerminal maybeCatches = addNonTerminal(NonTerminal.of("maybeCatches"));
NonTerminal maybeDims = addNonTerminal(NonTerminal.of("maybeDims"));
NonTerminal maybeIntegerTypeSuffix = addNonTerminal(NonTerminal.of("maybeIntegerTypeSuffix"));
NonTerminal maybeDigits = addNonTerminal(NonTerminal.of("maybeDigits"));
NonTerminal maybeExponentPart = addNonTerminal(NonTerminal.of("maybeExponentPart"));
NonTerminal maybeFloatTypeSuffix = addNonTerminal(NonTerminal.of("maybeFloatTypeSuffix"));
NonTerminal maybeSign = addNonTerminal(NonTerminal.of("maybeSign"));
NonTerminal maybeStringCharacters = addNonTerminal(NonTerminal.of("maybeStringCharacters"));


unit.setRule(maybePackageDeclaration.add(maybeImportDeclarations).add(maybeTypeDeclarations));
packageDeclaration.setRule(Terminal.of("package").add(packageName).add(Terminal.of(";")));
packageName.setRule(Identifier.instance().or(packageName.add(Terminal.of(".")).add(Identifier.instance())));
importDeclarations.setRule(importDeclaration.or(importDeclarations.add(importDeclaration)));
importDeclaration.setRule(singleTypeImportDeclaration.or(typeImportOnDemandDeclaration));
singleTypeImportDeclaration.setRule(Terminal.of("import").add(typeName).add(Terminal.of(";")));
typeImportOnDemandDeclaration.setRule(Terminal.of("import").add(packageName).add(Terminal.of(".")).add(Terminal.of("*")).add(Terminal.of(";")));
typeDeclarations.setRule(typeDeclaration.or(typeDeclarations.add(typeDeclaration)));
typeName.setRule(Identifier.instance().or(packageName.add(Terminal.of(".")).add(Identifier.instance())));
typeDeclaration.setRule(classDeclaration.or(interfaceDeclaration.or(EmptyTerminal.instance())));
classDeclaration.setRule(maybeClassModifiers.add(Terminal.of("class")).add(Identifier.instance()).add(maybeSuperDeclaration).add(maybeInterfaces).add(classBody));
classModifiers.setRule(classModifier.or(classModifiers.add(classModifier)));
classModifier.setRule(Terminal.of("public").or(Terminal.of("abstract").or(Terminal.of("final"))));
superDeclaration.setRule(Terminal.of("extends").add(classType));
interfaces.setRule(Terminal.of("implements").add(interfaceTypeList));
interfaceTypeList.setRule(interfaceType.or(interfaceTypeList.add(Terminal.of(",")).add(interfaceType)));
classBody.setRule(Terminal.of("{").add(maybeClassBodyDeclarations).add(Terminal.of("}")));
staticInitializer.setRule(Terminal.of("static").add(block));
classBodyDeclarations.setRule(classBodyDeclaration.or(classBodyDeclarations.add(classBodyDeclaration)));
classBodyDeclaration.setRule(classMemberDeclaration.or(staticInitializer.or(constructorDeclaration)));
classMemberDeclaration.setRule(fieldDeclaration.or(methodDeclaration));
fieldDeclaration.setRule(maybeFieldModifiers.add(type).add(variableDeclarators).add(Terminal.of(";")));
methodDeclaration.setRule(methodHeader.add(methodBody));
methodBody.setRule(block.or(EmptyTerminal.instance()));
block.setRule(Terminal.of("{").add(maybeBlockStatements).add(Terminal.of("}")));
methodHeader.setRule(maybeMethodModifiers.add(resultType).add(methodDeclarator).add(maybeThrows));
constructorDeclaration.setRule(maybeConstructorModifiers.add(constructorDeclarator).add(maybeThrows).add(constructorBody));
constructorModifiers.setRule(constructorModifier.or(constructorModifiers.add(constructorModifier)));
constructorModifier.setRule(Terminal.of("public").or(Terminal.of("protected").or(Terminal.of("private"))));
constructorDeclarator.setRule(simpleTypeName.add(Terminal.of("(")).add(maybeFormalParameterList).add(Terminal.of(")")));
formalParameterList.setRule(formalParameter.or(formalParameterList.add(Terminal.of(",")).add(formalParameter)));
formalParameter.setRule(type.add(variableDeclaratorId));
ntthrows.setRule(Terminal.of("throws").add(classTypeList));
classTypeList.setRule(classType.or(classTypeList.add(Terminal.of(",")).add(classType)));
constructorBody.setRule(Terminal.of("{").add(maybeExplicitConstructorInvocation).add(maybeBlockStatements).add(Terminal.of("}")));
explicitConstructorInvocation.setRule(Terminal.of("this").add(Terminal.of("(")).add(maybeArgumentList).add(Terminal.of(")")).or(Terminal.of("super").add(Terminal.of("(")).add(maybeArgumentList).add(Terminal.of(")"))));
fieldModifiers.setRule(fieldModifier.or(fieldModifiers.add(fieldModifier)));
fieldModifier.setRule(Terminal.of("public").or(Terminal.of("protected").or(Terminal.of("private").or(Terminal.of("static").or(Terminal.of("final").or(Terminal.of("transient").or(Terminal.of("volatile"))))))));
variableDeclarators.setRule(variableDeclarator.or(variableDeclarators.add(Terminal.of(",")).add(variableDeclarator)));
variableDeclarator.setRule(variableDeclaratorId.or(variableDeclaratorId.add(Terminal.of("=")).add(variableInitializer)));
variableDeclaratorId.setRule(Identifier.instance().or(variableDeclaratorId.add(Terminal.of("[")).add(Terminal.of("]"))));
variableInitializer.setRule(expression.or(arrayInitializer));
resultType.setRule(type.or(Terminal.of("void")));
methodModifiers.setRule(methodModifier.or(methodModifiers.add(methodModifier)));
methodModifier.setRule(Terminal.of("public").or(Terminal.of("protected").or(Terminal.of("private").or(Terminal.of("static").or(Terminal.of("abstract").or(Terminal.of("final").or(Terminal.of("synchronized").or(Terminal.of("native")))))))));
methodDeclarator.setRule(Identifier.instance().add(Terminal.of("(")).add(maybeFormalParameterList).add(Terminal.of(")")));
interfaceDeclaration.setRule(maybeInterfaceModifiers.add(Terminal.of("interface")).add(Identifier.instance()).add(maybeExtendsInterfaces).add(interfaceBody));
interfaceModifiers.setRule(interfaceModifier.or(interfaceModifiers.add(interfaceModifiers)));
interfaceModifier.setRule(Terminal.of("public").or(Terminal.of("abstract")));
extendsInterfaces.setRule(Terminal.of("extends").add(interfaceType).or(extendsInterfaces.add(Terminal.of(",")).add(interfaceType)));
interfaceBody.setRule(Terminal.of("{").add(maybeInterfaceMemberDeclarations).add(Terminal.of("}")));
interfaceMemberDeclarations.setRule(interfaceMemberDeclaration.or(interfaceMemberDeclarations.add(interfaceMemberDeclaration)));
interfaceMemberDeclaration.setRule(constantDeclaration.or(abstractMethodDeclaration));
constantDeclaration.setRule(constantModifiers.add(type).add(variableDeclarator));
constantModifiers.setRule(Terminal.of("public").or(Terminal.of("static").or(Terminal.of("final"))));
abstractMethodDeclaration.setRule(maybeAbstractMethodModifiers.add(resultType).add(methodDeclarator).add(maybeThrows));
abstractMethodModifiers.setRule(abstractMethodModifier.or(abstractMethodModifiers.add(abstractMethodModifier)));
abstractMethodModifier.setRule(Terminal.of("public").or(Terminal.of("abstract")));
arrayInitializer.setRule(Terminal.of("{").add(maybeVariableInitializers).add(Terminal.of("}")));
variableInitializers.setRule(variableInitializer.or(variableInitializers.add(Terminal.of(",")).add(variableInitializer)));
type.setRule(primitiveType.or(referenceType));
primitiveType.setRule(numericType.or(Terminal.of("boolean")));
numericType.setRule(integralType.or(floatingPointType));
integralType.setRule(Terminal.of("byte").or(Terminal.of("short").or(Terminal.of("int").or(Terminal.of("long").or(Terminal.of("char"))))));
floatingPointType.setRule(Terminal.of("float").or(Terminal.of("double")));
referenceType.setRule(classOrInterfaceType.or(arrayType));
classOrInterfaceType.setRule(classType.or(interfaceType));
classType.setRule(typeName);
interfaceType.setRule(typeName);
arrayType.setRule(type.add(Terminal.of("[")).add(Terminal.of("]")));
blockStatements.setRule(blockStatement.or(blockStatements.add(blockStatement)));
blockStatement.setRule(localVariableDeclarationStatement.or(statement));
localVariableDeclarationStatement.setRule(localVariableDeclaration);
localVariableDeclaration.setRule(type.add(variableDeclarators));
statement.setRule(statementWithoutTrailingSubstatement.or(labeledStatement.or(ifThenStatement.or(ifThenElseStatement.or(whileStatement.or(forStatement))))));
statementNoShortIf.setRule(statementWithoutTrailingSubstatement.or(labeledStatementNoShortIf.or(ifThenElseStatementNoShortIf.or(whileStatementNoShortIf.or(forStatementNoShortIf)))));
statementWithoutTrailingSubstatement.setRule(block.or(emptyStatement.or(expressionStatement.or(switchStatement.or(doStatement.or(breakStatement.or(continueStatement.or(returnStatement.or(synchronizedStatement.or(throwsStatements.or(tryStatement)))))))))));
emptyStatement.setRule(EmptyTerminal.instance());
labeledStatement.setRule(Identifier.instance().add(Terminal.of(":")).add(statement));
labeledStatementNoShortIf.setRule(Identifier.instance().add(Terminal.of(":")).add(statementNoShortIf));
expressionStatement.setRule(statementExpression);
statementExpression.setRule(assignment.or(preincrementExpression.or(postincrementExpression.or(predecrementExpression.or(postdecrementExpression.or(methodInvocation.or(classInstanceCreationExpression)))))));
ifThenStatement.setRule(Terminal.of("if").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(statement));
ifThenElseStatement.setRule(Terminal.of("if").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(statementNoShortIf).add(Terminal.of("else")).add(statement));
ifThenElseStatementNoShortIf.setRule(Terminal.of("if").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(statementNoShortIf).add(Terminal.of("else")).add(statementNoShortIf));
switchStatement.setRule(Terminal.of("switch").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(switchBlock));
switchBlock.setRule(Terminal.of("{").add(maybeSwitchBlockStatementGroups).add(maybeSwitchLabels).add(Terminal.of("}")));
switchBlockStatementGroups.setRule(switchBlockStatementGroups.or(switchBlockStatementGroups.add(switchBlockStatementGroup)));
switchBlockStatementGroup.setRule(switchLabels.add(blockStatements));
switchLabels.setRule(switchLabel.or(switchLabels.add(switchLabel)));
switchLabel.setRule(Terminal.of("case").add(constantExpression).add(Terminal.of(":")).or(Terminal.of("default").add(Terminal.of(":"))));
whileStatement.setRule(Terminal.of("while").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(statement));
whileStatementNoShortIf.setRule(Terminal.of("while").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(statementNoShortIf));
doStatement.setRule(Terminal.of("do").add(statement).add(Terminal.of("while")).add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(Terminal.of(";")));
forStatement.setRule(Terminal.of("for").add(Terminal.of("(")).add(maybeForInit).add(Terminal.of(";")).add(maybeExpression).add(Terminal.of(";")).add(maybeForUpdate).add(Terminal.of(")")).add(statement));
forStatementNoShortIf.setRule(Terminal.of("for").add(Terminal.of("(")).add(maybeForInit).add(Terminal.of(";")).add(maybeExpression).add(Terminal.of(";")).add(maybeForUpdate).add(Terminal.of(")")).add(statementNoShortIf));
forInit.setRule(statementExpressionList.or(localVariableDeclaration));
forUpdate.setRule(statementExpressionList);
statementExpressionList.setRule(statementExpression.or(statementExpressionList.add(Terminal.of(",")).add(statementExpression)));
breakStatement.setRule(Terminal.of("break").add(maybeIdentifier).add(Terminal.of(";")));
continueStatement.setRule(Terminal.of("continue").add(maybeIdentifier).add(Terminal.of(";")));
returnStatement.setRule(Terminal.of("return").add(maybeExpression).add(Terminal.of(";")));
throwsStatement.setRule(Terminal.of("throw").add(expression).add(Terminal.of(";")));
synchronizedStatement.setRule(Terminal.of("synchronized").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(block));
tryStatement.setRule(Terminal.of("try").add(block).add(catches).or(Terminal.of("try").add(block).add(maybeCatches).add(ntfinally)));
catches.setRule(catchClause.or(catches.add(catchClause)));
catchClause.setRule(Terminal.of("catch").add(Terminal.of("(")).add(formalParameter).add(Terminal.of(")")).add(block));
ntfinally.setRule(Terminal.of("finally").add(block));
constantExpression.setRule(expression);
expression.setRule(assignmentExpression);
assignmentExpression.setRule(conditionalExpression.or(assignment));
assignment.setRule(leftHandSide.add(assignmentOperator).add(assignmentExpression));
leftHandSide.setRule(expressionName.or(fieldAccess.or(arrayAccess)));
assignmentOperator.setRule(Terminal.of("=").or(Terminal.of("*=").or(Terminal.of("/=").or(Terminal.of("%=").or(Terminal.of("+=").or(Terminal.of("-=").or(Terminal.of("<<=").or(Terminal.of(">>=").or(Terminal.of(">>>=").or(Terminal.of("&=").or(Terminal.of("^=").or(Terminal.of("|=")))))))))))));
conditionalExpression.setRule(conditionalOrExpression.or(conditionalOrExpression.add(Terminal.of("?")).add(expression).add(Terminal.of(":")).add(conditionalExpression)));
conditionalOrExpression.setRule(conditionalAndExpression.or(conditionalOrExpression.add(Terminal.of("||")).add(conditionalAndExpression)));
conditionalAndExpression.setRule(inclusiveOrExpression.or(conditionalAndExpression.add(Terminal.of("&&")).add(inclusiveOrExpression)));
inclusiveOrExpression.setRule(exclusiveOrExpression.or(inclusiveOrExpression.or(exclusiveOrExpression)));
exclusiveOrExpression.setRule(andExpression.or(exclusiveOrExpression.add(Terminal.of("^")).add(andExpression)));
andExpression.setRule(equalityExpression.or(andExpression.add(Terminal.of("&")).add(equalityExpression)));
equalityExpression.setRule(relationalExpression.or(equalityExpression.add(Terminal.of("==")).add(relationalExpression).or(equalityExpression.add(Terminal.of("!=")).add(relationalExpression))));
relationalExpression.setRule(shiftExpression.or(relationalExpression.add(Terminal.of("<")).add(shiftExpression).or(relationalExpression.add(Terminal.of(">")).add(shiftExpression).or(relationalExpression.add(Terminal.of("<=")).add(shiftExpression).or(relationalExpression.add(Terminal.of(">=")).add(shiftExpression).or(relationalExpression.add(Terminal.of("instanceof")).add(shiftExpression)))))));
shiftExpression.setRule(additiveExpression.or(shiftExpression.add(Terminal.of("<<")).add(additiveExpression).or(shiftExpression.add(Terminal.of(">>")).add(additiveExpression).or(shiftExpression.add(Terminal.of(">>>")).add(additiveExpression)))));
additiveExpression.setRule(multiplicativeExpression.or(additiveExpression.add(Terminal.of("+")).add(multiplicativeExpression).or(additiveExpression.add(Terminal.of("-")).add(multiplicativeExpression))));
multiplicativeExpression.setRule(unaryExpression.or(multiplicativeExpression.add(Terminal.of("*")).add(unaryExpression).or(multiplicativeExpression.add(Terminal.of("/")).add(unaryExpression).or(multiplicativeExpression.add(Terminal.of("%")).add(unaryExpression)))));
castExpression.setRule(Terminal.of("(").add(primitiveType).add(Terminal.of(")")).add(unaryExpression).or(Terminal.of("(").add(referenceType).add(Terminal.of(")")).add(unaryExpressionNotPlusMinus)));
unaryExpression.setRule(preincrementExpression.or(predecrementExpression.or(Terminal.of("+").add(unaryExpression).or(Terminal.of("-").add(unaryExpression).or(unaryExpressionNotPlusMinus)))));
preincrementExpression.setRule(Terminal.of("++").add(unaryExpression));
predecrementExpression.setRule(Terminal.of("--").add(unaryExpression));
unaryExpressionNotPlusMinus.setRule(postfixExpression.or(Terminal.of("~").add(unaryExpression).or(Terminal.of("!").add(unaryExpression).or(castExpression))));
postdecrementExpression.setRule(postfixExpression.add(Terminal.of("--")));
postincrementExpression.setRule(postfixExpression.add(Terminal.of("++")));
postfixExpression.setRule(primary.or(expressionName.or(postincrementExpression.or(postdecrementExpression))));
methodInvocation.setRule(methodName.add(Terminal.of("(")).add(maybeArgumentList).add(Terminal.of(")")).or(primary.add(Terminal.of(".")).add(Identifier.instance()).add(Terminal.of("(")).add(maybeArgumentList).add(Terminal.of(")")).or(Terminal.of("super").add(Terminal.of(".")).add(Identifier.instance()).add(Terminal.of("(")).add(maybeArgumentList).add(Terminal.of(")")))));
fieldAccess.setRule(primary.add(Terminal.of(".")).add(Identifier.instance()).or(Terminal.of("super").add(Terminal.of(".")).add(Identifier.instance())));
primary.setRule(primaryNoNewArray.or(arrayCreationExpression));
primaryNoNewArray.setRule(literal.or(Terminal.of("this").or(Terminal.of("(").add(expression).add(Terminal.of(")")).or(classInstanceCreationExpression.or(fieldAccess.or(methodInvocation.or(arrayAccess)))))));
classInstanceCreationExpression.setRule(Terminal.of("new").add(classType).add(Terminal.of("(")).add(maybeArgumentList).add(Terminal.of(")")));
argumentList.setRule(expression.or(argumentList.add(Terminal.of(",")).add(expression)));
arrayCreationExpression.setRule(Terminal.of("new").add(primitiveType).add(dimExprs).add(maybeDims).or(Terminal.of("new").add(classOrInterfaceType).add(dimExprs).add(maybeDims)));
dimExprs.setRule(dimExpr.or(dimExprs.add(dimExpr)));
dimExpr.setRule(Terminal.of("[").add(expression).add(Terminal.of("]")));
dims.setRule(Terminal.of("[").add(Terminal.of("]")).or(dims.add(Terminal.of("[")).add(Terminal.of("]"))));
arrayAccess.setRule(expressionName.add(Terminal.of("[")).add(expression).add(Terminal.of("]")).or(primaryNoNewArray.add(Terminal.of("[")).add(expression).add(Terminal.of("]"))));
simpleTypeName.setRule(Identifier.instance());
expressionName.setRule(Identifier.instance().or(ambiguousName.add(Terminal.of(".")).add(Identifier.instance())));
methodName.setRule(Identifier.instance().or(ambiguousName.add(Terminal.of(".")).add(Identifier.instance())));
ambiguousName.setRule(Identifier.instance().or(ambiguousName.add(Terminal.of(".")).add(Identifier.instance())));
literal.setRule(integerLiteral.or(floatingPointLiteral.or(booleanLiteral.or(Text.instance().or(stringLiteral.or(nullLiteral))))));
integerLiteral.setRule(decimalIntegerLiteral.or(hexIntegerLiteral.or(octalIntegerLiteral)));
decimalIntegerLiteral.setRule(decimalNumeral.add(maybeIntegerTypeSuffix));
hexIntegerLiteral.setRule(hexNumeral.add(maybeIntegerTypeSuffix));
octalIntegerLiteral.setRule(octalNumeral.add(maybeIntegerTypeSuffix));
integerTypeSuffix.setRule(Terminal.of("l").or(Terminal.of("L")));
decimalNumeral.setRule(Terminal.of("0").or(nonZeroDigit.add(maybeDigits)));
digits.setRule(digit.or(digits.add(digit)));
digit.setRule(Terminal.of("0").or(nonZeroDigit));
nonZeroDigit.setRule(Terminal.of("1").or(Terminal.of("2").or(Terminal.of("3").or(Terminal.of("4").or(Terminal.of("5").or(Terminal.of("6").or(Terminal.of("7").or(Terminal.of("8").or(Terminal.of("9"))))))))));
hexNumeral.setRule(Terminal.of("0").add(Terminal.of("x")).add(hexDigit).or(Terminal.of("0").add(Terminal.of("X")).add(hexDigit).or(hexNumeral.add(hexDigit))));
hexDigit.setRule(Terminal.of("0").or(Terminal.of("1").or(Terminal.of("2").or(Terminal.of("3").or(Terminal.of("4").or(Terminal.of("5").or(Terminal.of("6").or(Terminal.of("7").or(Terminal.of("8").or(Terminal.of("9").or(Terminal.of("a").or(Terminal.of("b").or(Terminal.of("c").or(Terminal.of("d").or(Terminal.of("e").or(Terminal.of("f").or(Terminal.of("A").or(Terminal.of("B").or(Terminal.of("C").or(Terminal.of("D").or(Terminal.of("E").or(Terminal.of("F")))))))))))))))))))))));
octalNumeral.setRule(Terminal.of("0").add(octalDigit).or(octalNumeral.add(octalDigit)));
octalDigit.setRule(Terminal.of("0").or(Terminal.of("1").or(Terminal.of("2").or(Terminal.of("3").or(Terminal.of("4").or(Terminal.of("5").or(Terminal.of("6").or(Terminal.of("7")))))))));
floatingPointLiteral.setRule(digits.add(Terminal.of(".")).add(maybeDigits).add(maybeExponentPart).add(maybeFloatTypeSuffix));
exponentPart.setRule(exponentIndicator.add(signedInteger));
exponentIndicator.setRule(Terminal.of("e").or(Terminal.of("E")));
signedInteger.setRule(maybeSign.add(digits));
sign.setRule(Terminal.of("+").or(Terminal.of("-")));
floatTypeSuffix.setRule(Terminal.of("f").or(Terminal.of("F").or(Terminal.of("d").or(Terminal.of("D")))));
booleanLiteral.setRule(Terminal.of("true").or(Terminal.of("false")));
singleCharacter.setRule(charInputCharacter);
stringLiteral.setRule(Terminal.of("\"").add(maybeStringCharacters).add(Terminal.of("\"")));
stringCharacters.setRule(stringCharacter.or(stringCharacters.add(stringCharacter)));
stringCharacter.setRule(stringInputCharacter.or(escapeCharacter));
nullLiteral.setRule(Terminal.of("null"));
escapeCharacter.setRule(Terminal.of("\\"));
maybePackageDeclaration.setRule(packageDeclaration.or(EmptyTerminal.instance()));
maybeImportDeclarations.setRule(importDeclarations.or(EmptyTerminal.instance()));
maybeTypeDeclarations.setRule(typeDeclarations.or(EmptyTerminal.instance()));
maybeClassModifiers.setRule(classModifiers.or(EmptyTerminal.instance()));
maybeSuperDeclaration.setRule(superDeclaration.or(EmptyTerminal.instance()));
maybeInterfaces.setRule(interfaces.or(EmptyTerminal.instance()));
maybeClassBodyDeclarations.setRule(classBodyDeclarations.or(EmptyTerminal.instance()));
maybeFieldModifiers.setRule(fieldModifiers.or(EmptyTerminal.instance()));
maybeBlockStatements.setRule(blockStatements.or(EmptyTerminal.instance()));
maybeMethodModifiers.setRule(methodModifiers.or(EmptyTerminal.instance()));
maybeThrows.setRule(ntthrows.or(EmptyTerminal.instance()));
maybeConstructorModifiers.setRule(constructorModifiers.or(EmptyTerminal.instance()));
maybeFormalParameterList.setRule(formalParameterList.or(EmptyTerminal.instance()));
maybeExplicitConstructorInvocation.setRule(explicitConstructorInvocation.or(EmptyTerminal.instance()));
maybeArgumentList.setRule(argumentList.or(EmptyTerminal.instance()));
maybeInterfaceModifiers.setRule(interfaceModifiers.or(EmptyTerminal.instance()));
maybeExtendsInterfaces.setRule(extendsInterfaces.or(EmptyTerminal.instance()));
maybeInterfaceMemberDeclarations.setRule(interfaceMemberDeclarations.or(EmptyTerminal.instance()));
maybeAbstractMethodModifiers.setRule(abstractMethodModifiers.or(EmptyTerminal.instance()));
maybeVariableInitializers.setRule(variableInitializers.or(EmptyTerminal.instance()));
maybeSwitchBlockStatementGroups.setRule(switchBlockStatementGroups.or(EmptyTerminal.instance()));
maybeSwitchLabels.setRule(switchLabels.or(EmptyTerminal.instance()));
maybeForInit.setRule(forInit.or(EmptyTerminal.instance()));
maybeExpression.setRule(expression.or(EmptyTerminal.instance()));
maybeForUpdate.setRule(forUpdate.or(EmptyTerminal.instance()));
maybeIdentifier.setRule(Identifier.instance().or(EmptyTerminal.instance()));
maybeCatches.setRule(catches.or(EmptyTerminal.instance()));
maybeDims.setRule(dims.or(EmptyTerminal.instance()));
maybeIntegerTypeSuffix.setRule(integerTypeSuffix.or(EmptyTerminal.instance()));
maybeDigits.setRule(digits.or(EmptyTerminal.instance()));
maybeExponentPart.setRule(exponentPart.or(EmptyTerminal.instance()));
maybeFloatTypeSuffix.setRule(floatTypeSuffix.or(EmptyTerminal.instance()));
maybeSign.setRule(sign.or(EmptyTerminal.instance()));
maybeStringCharacters.setRule(stringCharacters.or(EmptyTerminal.instance()));

	return unit;
}

}
