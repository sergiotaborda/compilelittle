/**
* This is a test program file
*/
package packageName.subpackageName;

import java.lang.Math;

public class SenseProgram extends Any implements Iterable<Int> {


	Int x = new Int(1);
	Long y = 2;
	String s;
	
	// http://www.devoxx.com/display/DV11/Is+Fantom+light+years+ahead+of+Scala
	// intervals
	// use in/out in properties for get/set
	// use ${ } or {{ }} for string interpolation
	// parentesis are optional for zero arguments methods. UAP 
	// Peer classes and native
	// native import ?
	// native = call to subjacent plataform api. this must be 
	// compiler plugins and delegation sintax  Regex<| ashdads |>
	// Window { Size = Size { 20, 40} }} equivalente to new
	// constructors are curried Actions like constructor.apply(this): Void. 
	// Property bag as single loadable/parsable file 
	// Optional parameters vs overloading vs generics vs compatability with javascritpt
	// ?. operator is wrong. No nulls means null aware operations
	// literals for urls (?)
	// list and map literals (javascript like)
	// list = {"a","b","c"} 
	// map = { "a": 1, "b": 2 , "c" : 3} 
	// resolve generics problem of adding list to a list (and a sequence to a sequence)
	// Methods are wrappers arround functions bacause thery curry arround 'this'. static types do not curry
	// value classes :  public val class Rational , to mean the class is imutable. properties must also be val or only have methods
	// value classes are "primitives" and be safely shared by actors: actor.send(message). Message must be imutable or seriablizable.
	// Mark interfaces Imutable and Serializable and have : class Actor {   Void send<T extends Imutable | Serializable>(T msg)  }
	// Language shoul help comunication and documentation. 
	// String?  
	// all numeric literals are rational 
	// imaginary unit is 'i' and 2i means new Rational("2") * Complex.I;
	// metadata read from .class
	// definition of classpath
	// identify dead code
	// identify out of range literals
	public Void main (Array<String> args){

		 try {
		 
		 	for (Natural i in 2 .. 3){ // 2 .. 3 is a Progression. Progressions always have a start and an end and are iterable. 
				continue;
			}
			//Intervals are not iterable and may not have extermities.
			Interval<Int> interval = new Interval<Int>(); // ] -oo , +oo[
			//Interval<Int> interval = new Interval<Int>().from(2).inclusive().to(6).inclusive(); // [2, 6]
			//Interval<Int> interval = new Interval<Int>().to(6).inclusive(); // ] -oo, 6] 
			//Interval<Int> interval = new Interval<Int>().from(6).inclusive(); // [6, +oo [ 
			//Interval<Int> interval = new Interval<Int>().from(6).exclusive(); // ] 6, +oo [ 
			
			
		    Boolean contained = interval.contains(4);
			
			Int f = -8;
			// Natural f = -8; is an error because naturals cannot be negative
		
			while (false ^ true) {
	
				other(5,8);
				continue;
			}
			
			for (String arg in args){
				continue;
			}

			if (true){
			   Decimal c = 8;
			   doit();
			}
			
			if (f !== y){
				arrangeit();
			} else {
				Real c = 8;
				dontarrangeit();
			}
			
			if (f == y){
				arrangeit();
			} else if (x != y) {
				Real c = 8;
				dontarrangeit();
			} else if (7 != 6) {
				Real c = 8;
				dontarrangeit();
			} else {
				dontarrangeit();
			}
			
			if ("s" == "u"){
				arrangeit();
			} else if (x != y) {
				dontarrangeit();
			}
			
			method(3, ++4);
			
			switch(args){
				case (1) {
					arrangeit();
				}
				case (2){
					Float c = 8;
					break;
				}
				default {
					somemore();
				}
			}
			
		 } catch (Exception e){
			 method(3, 4 % 8);
		 } finally {
		     s = "Error";
		     String g = s[9];
		 }
		 
	}
	
	public Long other (Int u , Int h){
	   return u +  6 * y % h;
	}
	
	public Void method (Natural a , Natural b){
	    //no-op
	}
	
	public Void somemore (){
	    //no-op
	}
	public Void dontarrangeit (){
	    //no-op
	}
	
    Void arrangeit (){
	    //no-op
	}
	
	private Void doit (){
	    //no-op
	}
}
