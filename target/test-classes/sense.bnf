unit = packageDeclaration ,  importDeclarations?, typeDeclarations;
packageDeclaration  = 'package' , qualifiedName , ';' ;
qualifiedName = identifier | qualifiedName , '.' , identifier; 
importDeclarations = importDeclaration | importDeclarations , importDeclaration;
importDeclaration = 'import' , qualifiedName , ';' ;
typeDeclarations = typeDeclaration | typeDeclarations ,  typeDeclaration;
typeDeclaration = classDeclaration ;
classDeclaration =  'class', qualifiedName, superDeclaration, classBody;
superDeclaration = empty | 'extends' , qualifiedName;
classBody = '{',classBodyDeclarations ,'}' | '{' ,'}';
classBodyDeclarations = classBodyDeclaration | classBodyDeclarations, classBodyDeclaration;
classBodyDeclaration = classMemberDeclaration;
classMemberDeclaration = fieldDeclaration | methodDeclaration;
fieldDeclaration =  type , variableDeclarator, ';';
type = qualifiedName;
variableDeclarator= variableName | variableName, '=', expression;
variableName = identifier;
methodDeclaration= methodHeader , methodBody;
methodHeader = returnType, identifier ,'(', formalParameterList , ')' | returnType, identifier ,'(', ')'; 
methodBody = block ;
block =  '{' , '}' | '{' , blockStatements , '}';
returnType = type | 'void';
formalParameterList = formalParameter | formalParameterList, ',', formalParameter;
formalParameter =  type, variableName;
blockStatements = blockStatement | blockStatements, blockStatement;
blockStatement = localVariableDeclarationStatement | statement;
statement= statementWithoutTrailingSubstatement | whileStatement | forStatement | ifThenStatement | ifThenElseStatement;
statementWithoutTrailingSubstatement= expressionStatement;
expressionStatement= statementExpression , ';';
statementExpression= assignment | postincrementExpression  | postdecrementExpression | methodInvocation | classInstanceCreationExpression;
localVariableDeclarationStatement= localVariableDeclaration, ';';
localVariableDeclaration = type, variableDeclarator;
whileStatement= 'while', '(', expression, ')',  block | 'while', '(', expression, ')';
forStatement= 'for',  '(', iterationType , 'in', expression ,')', block | 'for',  '(', iterationType , 'in', identifier ,')';
iterationType = type , variableName;
ifThenStatement = 'if', '(', expression ,')', block;
ifThenElseStatement = 'if', '(', expression ,')', block , 'else', block;
expression = conditionalExpression | assignment;
conditionalExpression= conditionalOrExpression | ternaryExpression;
ternaryExpression = conditionalOrExpression, '?', expression, ':', conditionalExpression;
conditionalOrExpression = conditionalAndExpression | conditionalOrExpression ,'||', conditionalAndExpression;
conditionalAndExpression = inclusiveOrExpression | conditionalAndExpression, '&&', inclusiveOrExpression;
inclusiveOrExpression= exclusiveOrExpression | inclusiveOrExpression '|' exclusiveOrExpression;
exclusiveOrExpression = andExpression | exclusiveOrExpression, '^', andExpression;
andExpression = equalityExpression | andExpression, '&', equalityExpression;
equalityExpression = relationalExpression | equalityExpression, equalityOperator, relationalExpression;
equalityOperator = '==' | '!=';
relationalExpression = shiftExpression | relationalExpression, compareOperator, shiftExpression | relationalExpression, 'instanceof', shiftExpression;
compareOperator = '<' | '>' | '<=' | '>=';
shiftExpression = additiveExpression | shiftExpression, shiftOperator, additiveExpression;
shiftOperator = '<<' | '>>' | '>>>';
additiveExpression = multiplicativeExpression | additiveExpression, aditionOperator, multiplicativeExpression;
aditionOperator = '+' , '-';
multiplicativeExpression = unaryExpression |  multiplicativeExpression ,multiplicativeOperator, unaryExpression;
multiplicativeOperator = '*' | '/' | '%';
unaryExpression = unaryExpressionNotPlusMinus | unaryAditiveOperator, unaryExpression;
unaryAditiveOperator = '+' | '-'| '++' |'--';
unaryExpressionNotPlusMinus = postfixExpression | unaryMultiplicativeOperator, unaryExpression | castExpression;
unaryMultiplicativeOperator = '~' | '!' ;
castExpression = '.', 'castTo' ,'(', type, '.', 'class' ,')';
postfixExpression = primary | identifier | postincrementExpression  | postdecrementExpression;
postincrementExpression = postfixExpression, '++';
postdecrementExpression = postfixExpression, '--';
assignment = leftHandSide, assignmentOperator, expression;
leftHandSide = identifier | fieldAccess | arrayAccess;
assignmentOperator = '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=';
fieldAccess= primary ,'.', identifier | 'super', '.', identifier;
arrayAccess = qualifiedName ,'[', expression, ']' | primary, '[', expression, ']';
primary = literal | 'this' | '(', expression ,')' | fieldAccess | arrayAccess | classInstanceCreationExpression | methodInvocation;
classInstanceCreationExpression = 'new' ,type, '(', argumentList, ')' | 'new' ,type, '(', ')';
argumentList = expression | argumentList, ',', expression;
methodInvocation =  methodCall | primary ,'.', methodCall | 'super', '.', methodCall;
methodCall = identifier, '(', argumentList, ')' | identifier, '(', ')';
literal= numberLiteral | booleanLiteral | stringLiteral | nullLiteral;
numberLiteral = number;
booleanLiteral= 'true' | 'false';
stringLiteral = text;
nullLiteral = 'null';